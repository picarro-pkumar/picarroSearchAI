{
  "id": "a256bb24-6494-4fc5-9718-46bc1afbeda3",
  "title": "Calendar Events API",
  "messages": [
    {
      "id": "1754060488531",
      "content": "Calendar Events API",
      "role": "user",
      "timestamp": "2025-08-01 15:01:28.531000+00:00",
      "sources": null,
      "isTyping": false
    },
    {
      "id": "1754066641325",
      "content": "The Calendar Events API allows users to create, retrieve, update, and delete events in a calendar. It provides methods for creating one-time or recurring events, as well as managing instances of recurring events. \n\nHere are some examples of how you might use the API:\n\n1. Create a new one-time event:\n```python\nPOST /v1/calendar-events\nContent-Type: application/json\n{\n    \"title\": \"Meeting\",\n    \"date\": \"2023-04-01T10:00:00Z\"\n}\n```\n\n2. Create a new recurring event with an iCalendar RFC 5545 rule string:\n```python\nPOST /v1/calendar-events\nContent-Type: application/json\n{\n    \"title\": \"Team Meeting\",\n    \"rRuleStr\": \"FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR\"\n}\n```\n\n3. Retrieve all events:\n```python\nGET /v1/calendar-events\n```\n\n4. Update an existing event:\n```python\nPUT /v1/calendar-events/{eventId}\nContent-Type: application/json\n{\n    \"title\": \"Updated Meeting\",\n    \"date\": \"2023-05-01T10:00:00Z\"\n}\n```\n\n5. Delete an event:\n```python\nDELETE /v1/calendar-events/{eventId}\n```\n\nPlease note that the actual API endpoints and request formats may vary depending on the specific implementation of the Calendar Events API you are using. Always refer to the official documentation for accurate information.\n",
      "role": "assistant",
      "timestamp": "2025-08-01 16:44:01.324000+00:00",
      "sources": [
        {
          "content": "updatedDate\": \"date\", //epoch in milliseconds \"status\": 1 //0 - non-active, 1-is active \\} \\`\\`\\` **\n## 4\\. Calendar Event Update API\n### 1\\. Update Calendar Event \nUpdates a calendar event's details. For recurring events, this updates the entire series. For converting a one-time event to recurring, include the \\`rRuleStr\\` field.\n\\`\\`\\` Method: **P**atch Endpoint: **/v1/calendar-events/\\{event\\_id\\} Request Body \\{ \"name\": \"Updated Meeting Name\", // Optional \"startDateTime\": 1709251200000, // Optional \"endDateTime\": 1709254800000, // Optional \"importance\": 0, // Optional \"rRuleStr\": \"DTSTART:20250605T000000\\nRRULE:FREQ=WEEKLY;INTERVAL=1;BYDAY=MO,WE,FR\" // Optional, include to convert to recurring \\} \\`\\`\\` **\n### Examples\n#### 1\\. Update a One-Time Event\n\\`\\`\\` \\{ \"name\": \"Updated One-Time Meeting\", \"startDateTime\": 1709251200000, \"endDateTime\": 1709254800000 \\} \\`\\`\\` \n#### 2\\. Update an Entire Recurring Series\n\\`\\`\\` \\{ \"name\": \"Weekly Team Standup\", \"rRuleStr\": \"DTSTART:20250605T00",
          "similarity_score": 0.6196315458736634,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 55,
            "chunk_size": 1000,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        },
        {
          "content": "lendar Event\n### 1\\. Delete Calendar Event \nPermanently removes a calendar event from the system. If the event is recurring, this operation will delete the entire series including all past and future instances.\n\\`\\`\\` Method: **DELETE** Endpoint: **v1/calendar-events/\\{event-id\\} Response : \\{ id : \"event-uuid-string\", message : \"Event deleted successfully\" \\} \\`\\`\\` **\n### 2\\. Delete Calendar Event Instance\nRemoves a specific occurrence of a recurring calendar event while preserving the rest of the series. This endpoint should only be used with recurring events, as non-recurring events don't have separate instances.\n\\`\\`\\` Method: **DELETE** Endpoint: **v1/calendar-events/\\{event-id\\}/event-instances/\\{event-instance-id\\} Response : \\{ id : \"event-instance-uuid-string\", message : \"Event Instance deleted successfully\" \\} \\`\\`\\` **\n### 3\\. Bulk Delete Calendar Event\nThe API will delete multiple calendar events in a single transaction.",
          "similarity_score": 0.594823806472232,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 57,
            "chunk_size": 947,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        },
        {
          "content": "se, \"rRuleStr\" : null, //event is One Time \"createdDate\": \"date\", //epoch in milliseconds \"updatedDate\": \"date\", //epoch in milliseconds \"status\": 1 //0 - non-active, 1-is active \\}, \\`\\`\\` **\n### 2\\. Get Calendar Event Instance\n\\`\\`\\` Method: **GET** Endpoint: **/v1/calendar-events/\\{event\\_id\\}/event-instances/\\{event-instance-id\\} Description: To fetch Recurring Instance Event Response \\{ \"id\": \"123e4567-e89b-12d3-a456-426614174000\", \"eventInstanceId\" : \"77e4567-e89b-12d3-a456-426614174000\", \"name\": \"Weekly Status Meeting\", \"startDateTime\": 1709251200000, \"endDateTime\": 1709251200000, \"importance\": 0, \"isRecurring\": true, \"rRuleStr\" : \"DTSTART:20250605T000000 RRULE:FREQ=WEEKLY;INTERVAL=2;COUNT=5;BYDAY=MO,TU,WE\", \"createdDate\": \"date\", //epoch in milliseconds \"updatedDate\": \"date\", //epoch in milliseconds \"status\": 1 //0 - non-active, 1-is active \\} \\`\\`\\` **\n## 4\\. Calendar Event Update API\n### 1\\. Update Calendar Event \nUpdates a calendar event's details.",
          "similarity_score": 0.5828367536976774,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 54,
            "chunk_size": 973,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        },
        {
          "content": "e Response: \\[ \\{ \"name\": \"Asia/Kolkata\", \"abbreviation\" : \"IST\" \\}, \\{ \"name\": \"America/New\\_York\", \"abbreviation\" : \"EDT\" \\}, \\{ \"name\": \"Europe/London\", \"abbreviation\" : \"BST\" \\}, \\{ \"name\": \"America/Araguaina\", \"abbreviation\": \"-03\" \\} // ... all pytz timezones \\] \\`\\`\\` **\n* * *\n# Calendar Events API\n## Recurrence Pattern Summary\n| Pattern Type | Key Parameters | Use Cases | | --- | --- | --- | | Daily | interval | Every day, every 2 days, etc. | | Weekly | interval\\`byWeekDay\\` | Weekly meetings, bi-weekly events on specific days | | Monthly | interval\\`byMonthDay\\` or \\`byWeekDay\\`\\`bySetPos\\` | Monthly reviews, first Monday of month | | Yearly | interval\\`byMonth\\`, \\`byMonthDay\\` or \\`byWeekDay\\`\\`bySetPos\\` | Anniversaries, annual events | \n## Parameters Reference\n| Parameter | Type | Description | Example | | --- | --- | --- | --- | | \\`type\\` | String | Recurrence frequency \\(daily, weekly, monthly, yearly\\) | \"weekly\" | | interval | Integer | How often the pattern repeats",
          "similarity_score": 0.5628615270600005,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 43,
            "chunk_size": 999,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        },
        {
          "content": "| \\`end\\_date\\_time\\` | \\`int \\(epoch in ms\\)\\` | No | Epoch in miliseconds format for eg : 1709251200000 | | \\`importance\\` | list of int | No | Filter by importance level\\`0->Important, 1->Optional\\`\\`2->Informational,\\` | | \\`is\\_recurring\\` | bool | No | True or False 0 -> False \\(One Time\\)1 \u2192 True \\(Recurring\\) | | \\`current\\_page\\` | \\`int\\` | No | Current page for pagination. Default will be 1 | | \\`page\\_size\\` | \\`int\\` | No | Number of results per page.Default Page Size will be 10 | \\`\\`\\` jsonMethod: **GET** Endpoint: **v1/calendar-events Description: Get list of calendar events. Response will be sorted by startDateTime in Asc Response: \\{ \"items\": \\[ \\{ \"id\": \"123e4567-e89b-12d3-a456-426614174000\", \"name\": \"Weekly Status Meeting\", \"startDateTime\": 1709251200000, \"endDateTime\": 1709251200000, \"importance\": 0, //0->Important, 1->Optional, 2->Informational \"isRecurring\": true, \"eventInstanceId\" : \"77e4567-e89b-12d3-a456-426614174000\", \"rRuleStr\" : \"DTSTART:20250605T000000 RRU",
          "similarity_score": 0.5609650857218268,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 48,
            "chunk_size": 1000,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        },
        {
          "content": "\"unit\": \"ppb or \u03bcg/m\u00b3\" \\}, \"methodDetectionLimit\": \\{ \"value\": 0.037, \"unit\": \"ppb or \u03bcg/m\u00b3\" \\}, \"methodType\": \"method\\_327\", \"compoundCode\": \"C2H4O\" \\} \\} \\} \\`\\`\\` **\n* * *\n# Calendar Events API Contract\n## 1\\. Get Calendar Events\n\\`\\`\\` Method: **GET** Endpoint: **/v1/calendar-events/old Description: Get calendar events based on the provided start and end date range. Request Params: start: int // The start time of the calendar events \\(epoch time in ms\\) end: int // The end time of the calendar events \\(epoch time in ms\\) Response: \\{ \"events\": \\[ \\{ \"id\": \"string\", // Unique identifier for the event \"title\": \"string\", // Title or name of the event \"type\": \"string\", // Type of the event \\(e.g., \"task\", \"reminder\"\\) \"date\": \"int\", // epoch timestamp of the event in milliseconds \\(e.g., \"1797049600000\"\\) \"priority\": \"string\" // Priority level \\(e.g., \"low\", \"medium\", \"high\"\\) \\} \\] \\} \\`\\`\\` **\n* * *\n# Alert Dashboard API Contract\n## 1\\.",
          "similarity_score": 0.5547837352182504,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 33,
            "chunk_size": 952,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        },
        {
          "content": "id : \"event-instance-uuid-string\", message : \"Event Instance deleted successfully\" \\} \\`\\`\\` **\n### 3\\. Bulk Delete Calendar Event\nThe API will delete multiple calendar events in a single transaction. For recurring events, you can either delete specific instances \\(by providing \\`eventInstanceIds\\`\\) or delete the entire series \\(by omitting \\`eventInstanceIds\\`\\). The operation is atomic - if any event or instance cannot be found, the entire operation will fail.\nThe operation supports exactly two usage patterns:\n 1. Instance-specific deletion: Delete specific instances of recurring events \\(by providing \\`eventInstanceIds\\`\\) and/or one-time events\n 2. Series deletion: Delete entire series of recurring events and/or one-time events\n\nImportant: You cannot mix both approaches in a single request. Either all recurring events must specify instances to delete, or all recurring events must delete the entire series.",
          "similarity_score": 0.5502589575007416,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 58,
            "chunk_size": 923,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        },
        {
          "content": "e Meeting\", \"startDateTime\": 1709251200000, \"endDateTime\": 1709254800000 \\} \\`\\`\\` \n#### 2\\. Update an Entire Recurring Series\n\\`\\`\\` \\{ \"name\": \"Weekly Team Standup\", \"rRuleStr\": \"DTSTART:20250605T000000\\nRRULE:FREQ=WEEKLY;INTERVAL=1;BYDAY=MO,WE,FR\" \\} \\`\\`\\` \n#### 3\\. Convert a One-Time Event to Recurring\n\\`\\`\\` \\{ \"name\": \"Now Recurring Meeting\", \"rRuleStr\": \"DTSTART:20250605T000000\\nRRULE:FREQ=WEEKLY;INTERVAL=1;BYDAY=MO,WE,FR\" \\} \\`\\`\\` \n### 2\\. Update Calendar Event Instance\n\\`\\`\\` Method: **P**atch Endpoint: **/v1/calendar-events/\\{event-id\\}/event-instances/\\{event-instance-id\\} Request Body \\{ \"name\": \"Special Meeting Instance\", // Optional \"startDateTime\": 1709337600000, // Optional \"endDateTime\": 1709341200000, // Optional \"important\": 0, // Optional \\} \\`\\`\\` **\n## 5\\. Delete Calendar Event\n### 1\\. Delete Calendar Event \nPermanently removes a calendar event from the system. If the event is recurring, this operation will delete the entire series including all past and future",
          "similarity_score": 0.5349463046000575,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 56,
            "chunk_size": 999,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        },
        {
          "content": "/or one-time events\n\nImportant: You cannot mix both approaches in a single request. Either all recurring events must specify instances to delete, or all recurring events must delete the entire series.\n\\`\\`\\` Method: **POST** Endpoint: **v1/calendar-events/bulk-delete Description: The API will delete the calendar event, it will also delete list of event instance, if event instance are not passed then it will delete the entire recurrence series if that event is recurring Request Body \\{ \"items\": \\[ \\{ \"eventId\": \"uuid\", \"eventInstanceIds\": \\[\"instance-uuid\", \"instance-uuid\"\\] // Optional - if provided, only these instances are deleted \\}, \\{ \"eventId\": \"uuid\" // Without eventInstanceIds, deletes the entire event/series \\} \\] \\} Response : status code : 200 \\{ message : \"All items deleted successfully\" \\} status code : 400 \\{ \"error\\_type\"= \"VALUE\\_ERROR\", \"message\" : \"Validation failed: Event 723e4567-e89b-12d3-a456-426614174006 not found; Instance a23e4567-e89b-12d3-a456-426614174009 fo",
          "similarity_score": 0.5245663868425814,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 59,
            "chunk_size": 1000,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        },
        {
          "content": "in milliseconds \"status\": 1 //0 - non-active, 1-is active \\}, \\{ \"id\": \"223e4567-e89b-12d3-a456-426614174001\", \"name\": \"Monthly Maintenance\", \"startDateTime\": 1709251200000, \"endDateTime\": 1709251200000, \"importance\": 0, \"isRecurring\": false, \"eventInstanceId\" : null, //null incase of isRecurring false \"rRuleStr\": null, \"createdDate\": \"date\", //epoch in milliseconds \"updatedDate\": \"date\", //epoch in milliseconds \"status\": 1 //0 - non-active, 1-is active \\} \\] \"pagination\": \\{ \"currentPage\": 1, \"pageSize\": 10, \"totalRecords\": 1000 \\} \\} \\`\\`\\` **\n## 2\\. Create Calendar Event\nDescription : Creates a new calendar event, either one-time or recurring. For recurring events, the \\`rRuleStr\\` parameter specifies the recurrence pattern following the iCalendar RFC 5545 standard.\n### rRuleStr Format Requirements\nThe \\`rRuleStr\\` field must follow these requirements:\n 1. Must contain both \\`DTSTART:\\` and \\`RRULE:\\` parts\n 2.",
          "similarity_score": 0.49935927427715243,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 50,
            "chunk_size": 927,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        }
      ],
      "isTyping": false
    },
    {
      "id": "1754066664100",
      "content": "give me tenant api",
      "role": "user",
      "timestamp": "2025-08-01 16:44:24.100000+00:00",
      "sources": null,
      "isTyping": false
    },
    {
      "id": "1754066713563",
      "content": "Based on the provided context, here are some of the Tenant Management API contracts:\n\n## 1. Create Tenants\nThis API endpoint allows you to create a new tenant with details such as name, address, contact, etc. The request payload would contain these details in JSON format. Here's an example of how it might look like:\n\n```python\nPOST /v1/tenant\nContent-Type: application/json\n{\n  \"name\": \"Tenant Name\",\n  \"address\": {\n    \"line1\": \"Address Line 1\",\n    \"city\": \"City\",\n    \"state\": \"State\",\n    \"country\": \"Country\",\n    \"postalCode\": \"Postal Code\"\n  },\n  \"contact\": {\n    \"name\": \"Contact Name\",\n    \"email\": \"Email\",\n    \"phone\": \"Phone Number\"\n  }\n}\n```\nThe response would contain the details of the newly created tenant, including its unique identifier (UUID).\n\n## 2. Get All Tenants\nThis API endpoint allows you to retrieve all existing tenants. The response will include an array of all tenants with their respective details.\n\n```python\nGET /v1/tenant\n```\n\nEach item in the response would contain information such as name, address, contact, and status (active or not).\n\n## 3. Delete Tenants\nThis API endpoint allows you to delete a specific tenant by its UUID. This action will remove all associated data with that tenant.\n\n```python\nDELETE /v1/tenant/{uuid}\n```\nReplace `{uuid}` with the actual UUID of the tenant you want to delete.\n\n## 4. Modify Tenants\nThis API endpoint allows you to update details about a specific tenant by its UUID. The request payload should contain only the modified details in JSON format.\n\n```python\nPATCH /v1/tenant/{uuid}\nContent-Type: application/json\n{\n  \"name\": \"New Tenant Name\",\n  // other modified fields...\n}\n```\nReplace `{uuid}` with the actual UUID of the tenant you want to update.\n\nPlease note that these are just examples and might not reflect all possible API endpoints or request/response formats as per your specific requirements. For more detailed information, please refer to the official documentation provided by the service provider.\n",
      "role": "assistant",
      "timestamp": "2025-08-01 16:45:13.562000+00:00",
      "sources": [
        {
          "content": "\\`\\`\\` none \\`\\`\\` \n* * *\n# [Guidelines for API definitions and format](https://picarro.atlassian.net/wiki/spaces/FC/pages/edit-v2/3087827169#Guidelines-for-API-definitions-and-format)\n* * *\n# Tenant API Contract\n## 1\\. Create Tenants\nCurrently the logo upload is optional, the response will have \\`logoUrl\\` as null\n * country field should be a valid country alpha-2 code like \u2018US', 'IN\u2019. Refer API get countries api\n * If the country is 'US' then county field is mandatory in address\\(for tenant as well as for site address\\)\n * If you pass county for countries other then 'US', the county field will be ignored and default to None in database.\n\n\\`\\`\\` Method: **POST** PATH: **v1/tenant Request body: \\{ \"name\": \"string\", \"address\": \\[ \\{ \"name\": \"string\", \"addressLine1\": \"string\", \"addressLine2\": \"string\", \"city\": \"string\", \"state\": \"string\", \"country\": \"string\", \"county\" : \"string\", //mandatory when country='US' \"postalCode\": \"string\" \\} \\], \"contact\": \\[ \\{ \"firstName\": \"string\", \"lastName",
          "similarity_score": 0.6250844063732796,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 0,
            "chunk_size": 1000,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        },
        {
          "content": "// for country \u2260 US, county in response will be null \"postalCode\": \"string\" \\} \\], \"contact\": \\[ \\{ \"id\": \"string\", \"firstName\": \"string\", \"lastName\": \"string\", \"contactNumber\": \"string\", \"emailAddress\": \"string\" \\} \\], \"status\": 1, //Number \\(0 -> not active, 1 -> active\\) \"logoUrl\": \"string\" //signed URL \\} Error Responses: Status 1\\. 400-Validation errors \\{ \"message\": \"Invalid email format.\" \\} 2\\. 415-Unsupported media type \\(file\\) \\{ \"message\": \"Only .png, .jpg, .jpeg allowed.\" \\} Validation Rules: 1\\. Email Validation 2\\. Phone Number Validation 3\\. File Validation\\(Supports only .png, .jpg, .jpeg formats\\) 4\\. Country should be a valid alpha-2 code. Refer API https://picarro.atlassian.net/wiki/spaces/FC/pages/3432448008/Tenant+Management+API+contracts\\#1.-Country-List \\`\\`\\` **\n## 2\\. Modify Tenants\n\\`\\`\\` Method: **PATCH** Endpoint: **v1/tenant/\\{tenantId\\} //requst body will have only the modifed one Request Body: \\{ \"name\": \"string\", //optional \"address\": \\[ \\{ \"id\": \"strin",
          "similarity_score": 0.5755367071793291,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 2,
            "chunk_size": 1000,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        },
        {
          "content": "mber\": \"string\", \"emailAddress\": \"string\" \\} \\], \"status\": 1, //// 0 = Not Active, 1 = Active \"logoUrl\": \"string\" //signed URL \\} 404 client error \\{ \"message\": \"Tenant not found.\" \\} \\`\\`\\` **\n## 6\\. Get a Single Tenant Summary / Hierarchy\nIf the logo\\_path in the db is null then the \\`logoUrl\\` in the response will be null. If key is present in the logo\\_path \\(in db\\) and the key is valid key which is present in localstack/S3, \\`logoUrl\\` in the response will be presignURL with expiry of 1 hr.\n\\`\\`\\` Method: **GET** Endpoint: **v1/tenant/\\{tenantId\\}/summary Response: 200 OK \\{ \"name\": \"string\", \"logoUrl\":\"string\", //signed url \"sites\": \\[ \\{ \"id\": \"string\", \"name\": \"string\", \"sitePrograms\": \\[ \\{ \"id\": \"string\", \"programName\": \"Fenceline\", \"data\": \\{ \"monitoringSystems\": \\[ \\{ \"id\": \"string\", \"name\": \"string\" \\}, \\{ \"id\": \"string\", \"name\": \"string\" \\} \\], \"groups\": \\[ \\{ \"id\": \"string\", \"name\": \"string\" \\}, \\{ \"id\": \"string\", \"name\": \"string\" \\} \\] \\} \\}, \\{ \"id\": \"string\", \"progra",
          "similarity_score": 0.5261458794592676,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 8,
            "chunk_size": 1000,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        },
        {
          "content": "the response will be null. If key is present in the logo\\_path \\(in db\\) and the key is valid key which is present in localstack/S3, \\`logoUrl\\` in the response will be presignURL with expiry of 1 hr.\n\\`\\`\\` Method: **GET** Endpoint: **v1/tenant/\\{tenantId\\} Response: 200 OK \\{ \"id\": \"string\", \"name\": \"string\", \"createdDate\": \"date\", //epoch \"updatedDate\": \"date\", //epoch \"address\": \\[ \\{ \"id\": \"string\", \"name\": \"string\", \"addressLine1\": \"string\", \"addressLine2\": \"string\", \"city\": \"string\", \"state\": \"string\", \"country\": \"string\", \"county\" : \"string\", // for country \u2260 US, county in response will be null \"postalCode\": \"string\" \\} \\], \"contact\": \\[ \\{ \"id\": \"string\", \"firstName\": \"string\", \"lastName\": \"string\", \"contactNumber\": \"string\", \"emailAddress\": \"string\" \\} \\], \"status\": 1, //// 0 = Not Active, 1 = Active \"logoUrl\": \"string\" //signed URL \\} 404 client error \\{ \"message\": \"Tenant not found.\" \\} \\`\\`\\` **\n## 6\\.",
          "similarity_score": 0.5067779122265769,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 7,
            "chunk_size": 928,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        },
        {
          "content": "2\\. Modify Tenants\n\\`\\`\\` Method: **PATCH** Endpoint: **v1/tenant/\\{tenantId\\} //requst body will have only the modifed one Request Body: \\{ \"name\": \"string\", //optional \"address\": \\[ \\{ \"id\": \"string\", // UUID //if any address fields are modified Id is mandatory to send and if no Id is provided then a new address will be added for that tenant. \"name\": \"string\", \"addressLine1\": \"string\", \"addressLine2\": \"string\", \"city\": \"string\", \"state\": \"string\", \"country\": \"string\", \"county\" : \"string\", \"postalCode\": \"string\" \\} \\], \"contact\": \\[ \\{ \"id\": \"string\", // UUID //if any contact fields are modified Id is mandatory to send and if no Id is provided then a new contact will be added for that tenant. \"firstName\": \"string\", \"lastName\": \"string\", \"contactNumber\": \"string\", \"emailAddress\": \"string\" \\} \\], \"logo\": \\{ \"image\": \"base64image\", \"fileName\": \"string\", \"fileType\": \"string\" \\} \\} Successful Update \\(200 OK\\) \\{ \"id\": \"abc123\", //tenant uuid \"message\": \"Tenant updated successfully.",
          "similarity_score": 0.4770289286844345,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 3,
            "chunk_size": 993,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        },
        {
          "content": "tring\", \"name\": \"string\" \\}, \\{ \"id\": \"string\", \"name\": \"string\" \\} \\], \"groups\": \\[ \\{ \"id\": \"string\", \"name\": \"string\" \\}, \\{ \"id\": \"string\", \"name\": \"string\" \\} \\] \\} \\}, \\{ \"id\": \"string\", \"programName\": \"WMS\", //based on the program we might change the data object \"data\": \\{ \"monitoringSystems\": \\[ \\{ \"id\": \"string\", \"name\": \"string\" \\}, \\{ \"id\": \"string\", \"name\": \"string\" \\} \\], \"groups\": \\[ \\{ \"id\": \"string\", \"name\": \"string\" \\}, \\{ \"id\": \"string\", \"name\": \"string\" \\} \\] \\} \\} \\] \\} \\] \\} 404 client error \\{ \"message\": \"Tenant not found.\" \\} \\`\\`\\` **\n* * *\n# Site API Contract\n## 1\\. Create Sites\nNote : and The unit field can only have following values\n * \"UNSPECIFIED\"\n * \"PPB\"\n * \"PPM\"\n * \"PERCENT\n\nThe Frontend can pass the above values only in the request payload of create site, update site. The match is case insensitive means if you pass ppm, PPM, Ppm it is treated as PPM only and in db also we will save in UPPERCASE only.",
          "similarity_score": 0.46586041787464216,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 9,
            "chunk_size": 946,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        },
        {
          "content": "\\` in the response will be null. If key is present in the logo\\_path \\(in db\\) and the key is valid key which is present in localstack/S3, \\`logoUrl\\` in the response will be presignURL with expiry of 1 hr.\n\\`\\`\\` Method: **GET** Endpoint: **v1/tenant Queryparameters: current\\_page=1 \\(optional\\) page\\_size=10 \\(optional\\) sort=columnname \\(optional\\) desc=true|false \\(optional\\) //If page\\_size is not sent, return a response with all records, and totalRecords and pageSize will have the same value. //If the desc query parameter is not provided, it defaults to true. //If the sort query parameter is not provided, the records will be sorted in descending order by the createdDate by default Response: Successful Response 200 OK \\{ \"items\": \\[ \\{ \"id\": \"string\", \"name\": \"string\", \"createdDate\": \"date\", //epoch \"updatedDate\": \"date\", //epoch \"address\": \\[ \\{ \"id\": \"string\", \"name\": \"string\", \"addressLine1\": \"string\", \"addressLine2\": \"string\", \"city\": \"string\", \"state\": \"string\", \"country\": \"s",
          "similarity_score": 0.46538691163576984,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 5,
            "chunk_size": 1000,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        },
        {
          "content": "\"date\", //epoch \"updatedDate\": \"date\", //epoch \"address\": \\[ \\{ \"id\": \"string\", \"name\": \"string\", \"addressLine1\": \"string\", \"addressLine2\": \"string\", \"city\": \"string\", \"state\": \"string\", \"country\": \"string\", \"county\" : \"string\", // for country \u2260 US, county in response will be null \"postalCode\": \"string\", \\} \\], \"contact\": \\[ \\{ \"id\": \"string\", \"firstName\": \"string\", \"lastName\": \"string\", \"contactNumber\": \"string\", \"emailAddress\": \"string\" \\} \\], \"status\": 1, //// 0 = Not Active, 1 = Active \"logoUrl\": \"string\" \\} \\], \"pagination\": \\{ \"currentPage\": 1, \"pageSize\": 10, \"totalRecords\": 1 \\}, \"sort\": \"name\", //name of the column by which to sort the results \"desc\": \"true\" / \"false\" \\} \\`\\`\\` **\n## 5\\. Get a Single Tenant\nIf the logo\\_path in the db is null then the \\`logoUrl\\` in the response will be null. If key is present in the logo\\_path \\(in db\\) and the key is valid key which is present in localstack/S3, \\`logoUrl\\` in the response will be presignURL with expiry of 1 hr.",
          "similarity_score": 0.4601570495049909,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 6,
            "chunk_size": 986,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        },
        {
          "content": "tring\" \\} \\], \"logo\": \\{ \"image\": \"base64image\", \"fileName\": \"string\", \"fileType\": \"string\" \\} \\} Successful Update \\(200 OK\\) \\{ \"id\": \"abc123\", //tenant uuid \"message\": \"Tenant updated successfully.\" \\} \\`\\`\\` **\n## 3\\. Delete Tenants\nSoft delete a tenant \\(need to be discussed, as it will have implications on the hierarchy\\)\nWhen we delete the tenant and all the nested relationship will also be deleted.\nWhich includes all the sites,site address, site contacts, site program, groups, monitoring system, group monitoring system, site program threshold.\n\\`\\`\\` Method: **DELETE** Endpoint: **v1/tenant/\\{tenantId\\} response 200 ok \\{ \"id\": \"abc123\", //tenant uuid \"message\": \"Tenant deleted successfully.\" \\} \\`\\`\\` **\n## 4\\. Get All Tenants\nIf the logo\\_path in the db is null then the \\`logoUrl\\` in the response will be null. If key is present in the logo\\_path \\(in db\\) and the key is valid key which is present in localstack/S3, \\`logoUrl\\` in the response will be presignURL with expiry of",
          "similarity_score": 0.4447370305885736,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 4,
            "chunk_size": 1000,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        },
        {
          "content": "to the group \\} \\], \"status\": 1 // 0 -> not active, 1 -> active \\} \\] \\} \\} \\] \\} \\`\\`\\` **\n## 4\\. Modify Sites\nNote : and Currently only pass one \\`siteProgram\\` item inside \\`siteProgram\\` with id. Adding new \\`siteProgram\\` item support is not added yet.\n\\`\\`\\` py\\#\\!TODO: Multi-program update support pending. Current implementation handles only one site program item at a time. \\# Complete implementation will need to: \\# 1. Update existing programs where 'id' is provided \\# 2. Add new programs where 'programId' is provided \\# 3. Validate no duplicate program types across the site \\# 4. Handle compound configurations with proper validation \\# 5. Support removal of programs not included in the request \\(if applicable\\) \\`\\`\\` \\`\\`\\` Method: **PATCH** Endpoint: **/v1/tenant/\\{tenantId\\}/site/\\{siteId\\} //requst body will have only the modifed one Request Body: \\{ \"name\": \"string\", //optional \"status\": 1, //optional \"address\": \\[ //optional \\{ \"id\": \"uuid string\", // UUID //if any addr",
          "similarity_score": 0.4328060702517458,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 21,
            "chunk_size": 999,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        }
      ],
      "isTyping": false
    },
    {
      "id": "1754066774260",
      "content": "what is active monitoring feature. explain",
      "role": "user",
      "timestamp": "2025-08-01 16:46:14.260000+00:00",
      "sources": null,
      "isTyping": false
    },
    {
      "id": "1754067212542",
      "content": "Active monitoring refers to a system that continuously monitors various aspects of an operation or process in real time. This feature allows for immediate detection and response to any issues, anomalies, or changes in operational conditions. \n\nIn the context provided, active monitoring is used to monitor gas concentrations (15-minute averages), operational health, and system connectivity across a site. The goal of this feature is to provide comprehensive and easily interpretable data for effective decision-making.\n\nThe dashboard provides real-time updates on various aspects such as:\n\n1. **Real-Time Gas Concentration Monitoring**: Each system's gas concentration status is based on the latest value, with color-coded indicators (red for exceedance, orange for 75% of exceedance, green for below 75% of exceedance - safe levels and grey if no data is received for gas concentration) to quickly identify systems requiring corrective action.\n\n2. **Detailed System Insights**: Users can click on a system's status to view detailed information about the gas concentration levels and operational health, anemometer data, etc.\n\n3. **Operational Status**: Systems with operational issues display a health status symbol, providing real-time operational status updates.\n\n4. **Heartbeat Monitoring**: Each system verifies connectivity with a heartbeat signal every 15 seconds. If no heartbeat is received, the system triggers an alert and displays a \"System Down\" icon.\n\n5. **Wind Data specific to each system**: The dashboard shows wind speed and direction data specific to each system, updated every 5 seconds. This allows users to assess specific environmental conditions and their impact on individual systems.\n\n6. **Visual Indicators**: All critical alerts and statuses (gas exceedances, operational issues, system down) are represented with intuitive visual symbols and colors.\n\nThe API provided details the communication protocols, data structures, and interactions between the frontend dashboard and backend service for active monitoring. It includes endpoints to get latest telemetry info, web socket data formats for operational status and wind data, etc. \n\nPlease note that this is a high-level explanation of the active monitoring feature based on the provided context. For more detailed information about specific API endpoints or data structures, please refer to the provided API details in the context.\n",
      "role": "assistant",
      "timestamp": "2025-08-01 16:53:32.541000+00:00",
      "sources": [
        {
          "content": "to quickly identify systems requiring corrective action. \n * **Detailed System Insights:** Users can click to view a pop-up displaying detailed gas concentration levels and status, operational health, anemometer data.\n * **Operational Status:** Monitoring systems with operational issues display a health Status symbol, providing real-time operational status updates.\n * **Heartbeat Monitoring:** Each system verifies connectivity with a heartbeat signal every 15 seconds. If no heartbeat is received, the system triggers an alert, displays a \"System Down\" icon and the popup cannot be accessed\n * **Wind Data specific to the system:** Each system displays wind speed and direction data specific to the system, updated every 5 seconds, allowing users to assess specific environmental conditions and their impact on individual systems.\n * **Visual Indicators:** All critical alerts and statuses \\(gas exceedances, operational issues, system down\\) are represented with intuitive visual symbols and co",
          "similarity_score": 0.531433102751319,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 1,
            "chunk_size": 999,
            "content_length": 16031,
            "created_date": "2025-07-25T13:08:52.035Z",
            "document_id": "confluence_3778248705",
            "is_chunk": true,
            "last_modified": "2025-07-25T13:53:04.384Z",
            "page_id": "3778248705",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3778248705",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Detaila about active monitoring",
            "version": "1"
          }
        },
        {
          "content": "minutes \n\n\\`\\`\\` none \\`\\`\\` \n## Overview\nThis document provides a detailed definition of the <http://Socket.IO> and API contract between the Active Monitoring Dashboard and the backend Relay Service. It outlines the communication protocols, data structures, and interactions that ensure seamless integration and data exchange between the frontend dashboard and the backend service, including the expected request and response formats, error handling mechanisms, and any specific rules governing the transmission of information.\n## API\n### **Get Latest Telemetry Info for Active Monitoring Dashboard**\nEndpoint: **\\`/v1/telemetry/latest\\`**\nMethod: \\`GET\\`\nDescription: Get Latest Telemetry Info for Active Monitoring Dashboard By Site Program Id\n**Parameters:**\n * \\`siteProgramId\\` \\(query parameter, required\\): \n * Type: UUID\n * Description: Unique identifiers of the site program.\n\n**Responses:**\n * **200 OK**\n * Content-Type: application/json\n\n**Schema:**\n\\`\\`\\` \\{ \"siteProgramId\": \"fd53de65-",
          "similarity_score": 0.4858218639828271,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 14,
            "chunk_size": 1000,
            "content_length": 16031,
            "created_date": "2025-07-25T13:08:52.035Z",
            "document_id": "confluence_3778248705",
            "is_chunk": true,
            "last_modified": "2025-07-25T13:53:04.384Z",
            "page_id": "3778248705",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3778248705",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Detaila about active monitoring",
            "version": "1"
          }
        },
        {
          "content": "1. Scenario: The system shows the wrong status, such as critical error when in maintenance.\n 2. Expected Result: The operational status should reflect the correct issue.\n\n_Delayed Status Update:_\n 1. Scenario: There is a delay in updating the status symbol when an operational issue is detected.\n 2. Expected Result: The status symbol should update in real-time.\n\n_Stale or Missing Operational Data:_\n 1. Scenario: Operational data is not updated every 5 seconds, and no \"Data not available\" message is shown.\n 2. Expected Result: The system should show \"Data not available\" to ensure no stale data is displayed.\n\n_Heartbeat / Connectivity Monitoring_\n _No \"System Down\" Status for Missing Heartbeat:_\n 1. Scenario: Even if no heartbeat is received for 15 seconds, the system does not show a \"System Down\" status.\n 2. Expected Result: The system should display a \"System Down\" status if the heartbeat is not received.",
          "similarity_score": 0.4609195278121163,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 6,
            "chunk_size": 917,
            "content_length": 16031,
            "created_date": "2025-07-25T13:08:52.035Z",
            "document_id": "confluence_3778248705",
            "is_chunk": true,
            "last_modified": "2025-07-25T13:53:04.384Z",
            "page_id": "3778248705",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3778248705",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Detaila about active monitoring",
            "version": "1"
          }
        },
        {
          "content": "ven if no heartbeat is received for 15 seconds, the system does not show a \"System Down\" status.\n 2. Expected Result: The system should display a \"System Down\" status if the heartbeat is not received.\n\n _Wind Data for Each Monitoring System_\n _Wind Data Not Updated Every 5 Seconds:_\n 1. Scenario: Wind speed and direction data are not updated every 5 seconds, and no \"Data not available\" message is shown.\n 2. Expected Result: The system should display \"Data not available\" to prevent showing stale data.\n\n_Missing Wind Data:_\n 1. Scenario: Wind data is completely unavailable, and the system does not show a \"Data not available\" message.\n 2. Expected Result: Missing wind data should trigger a \"Data not available\" message.\n\n_Visual Indicators_\n _Incorrect Visual Indicators for Alerts:_\n 1. Scenario: The system shows the wrong visual symbol or color for critical alerts, such as showing green instead of red for a gas exceedance.\n 2.",
          "similarity_score": 0.4519902337762919,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 7,
            "chunk_size": 937,
            "content_length": 16031,
            "created_date": "2025-07-25T13:08:52.035Z",
            "document_id": "confluence_3778248705",
            "is_chunk": true,
            "last_modified": "2025-07-25T13:53:04.384Z",
            "page_id": "3778248705",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3778248705",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Detaila about active monitoring",
            "version": "1"
          }
        },
        {
          "content": "This feature focuses on providing active monitoring of gas concentrations \\(15-minute averages\\), operational health, and system connectivity across the entire site. The monitoring system will display visual indicators such as color-coded status \\(red/green\\) for 15- minutes concentration exceedance, operational alerts, and system down signs based on heartbeat monitoring for each system on the site. The goal is to provide comprehensive and easily interpretable data for effective decision-making.\n * **Real-Time Gas Concentration Monitoring:** Each system's gas concentration status is based on the latest value, with color-coded indicators \\(red for exceedance, orange for 75% of exceedance, green for below 75% of exceedance - safe levels and grey if no data is received for gas concentration\\) to quickly identify systems requiring corrective action. \n * **Detailed System Insights:** Users can click to view a pop-up displaying detailed gas concentration levels and status, operational health",
          "similarity_score": 0.4504512946892356,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 0,
            "chunk_size": 1000,
            "content_length": 16031,
            "created_date": "2025-07-25T13:08:52.035Z",
            "document_id": "confluence_3778248705",
            "is_chunk": true,
            "last_modified": "2025-07-25T13:53:04.384Z",
            "page_id": "3778248705",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3778248705",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Detaila about active monitoring",
            "version": "1"
          }
        },
        {
          "content": "space Event Name: ms\\_heartbeat\\_state //this should return heartbeat data for a monitoring system Response Structure: \\{ \"result\": \\{ \"time\": 19234942324, //Epoch Time \"siteProgramId\": 3212-2313-3112-2332, \"monitoringSystemId\": \"8395-9274-8373-0274\", // Id of the monitoring system which sent this heartbeat \"state\": 0 //0 - Not Connected | 1 - Connected \\} \\} \\`\\`\\` \n### Web Socket Data format for Monitoring System Operational Status\n\\`\\`\\` Method: **W**ebSocket Namespace: active-monitoring-namespace Event Name: ms\\_operational\\_state //this should return heartbeat data for a monitoring system Response Structure: \\{ \"result\": \\{ \"time\": 19234942324, //Epoch Time \"siteProgramId\": 3212-2313-3112-2332, \"monitoringSystemId\": \"8395-9274-8373-0274\", // Id of the monitoring system which sent this heartbeat \"state\": 4 // 0 = \"UNINITIALIZED\" | 1 = \"INITIALIZING\" | 2 = \"OK\" | 3 = \"MAINTENANCE\" | 4 = \"CRITICAL\" \\} \\} \\`\\`\\` \n### Web Socket Data format for Wind Data\n\\`\\`\\` Method: **W**ebSocket Na",
          "similarity_score": 0.4335859229269555,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 19,
            "chunk_size": 1000,
            "content_length": 16031,
            "created_date": "2025-07-25T13:08:52.035Z",
            "document_id": "confluence_3778248705",
            "is_chunk": true,
            "last_modified": "2025-07-25T13:53:04.384Z",
            "page_id": "3778248705",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3778248705",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Detaila about active monitoring",
            "version": "1"
          }
        },
        {
          "content": "de 51\\)\n 3. Move the go-live and live next to bean bar timeline on the right\n 4. Below the bar include an axis and every 12 bars in between the 12th and 13th bar - there should be a vertical line.\n 5. Below the axis line show the time interval selected\n 6. Please refer slide 52 in this presentation - [cloud-fenceline - presentation](https://www.figma.com/proto/inJKuHGy5HNdYKygtA8HpB/cloud-fenceline?node-id=2679-62742)\n 7. New date period selection - Last 24 hours, Last 90 Days, Custom - Refer figma - [cloud-fenceline - presentation](https://www.figma.com/proto/inJKuHGy5HNdYKygtA8HpB/cloud-fenceline?node-id=2679-63112)\n 8. Show bean bars bigger for averages that are bigger \\(14 days > 24 hours > 1 hour > 30 minutes > 15 minutes \n\n\\`\\`\\` none \\`\\`\\` \n## Overview\nThis document provides a detailed definition of the <http://Socket.IO> and API contract between the Active Monitoring Dashboard and the backend Relay Service.",
          "similarity_score": 0.4288154221699121,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 13,
            "chunk_size": 929,
            "content_length": 16031,
            "created_date": "2025-07-25T13:08:52.035Z",
            "document_id": "confluence_3778248705",
            "is_chunk": true,
            "last_modified": "2025-07-25T13:53:04.384Z",
            "page_id": "3778248705",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3778248705",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Detaila about active monitoring",
            "version": "1"
          }
        },
        {
          "content": "dicators_\n _Incorrect Visual Indicators for Alerts:_\n 1. Scenario: The system shows the wrong visual symbol or color for critical alerts, such as showing green instead of red for a gas exceedance.\n 2. Expected Result: The system should display the correct visual symbols and colors based on alert severity.\n\n_Delayed Visual Updates:_\n 1. Scenario: Visual indicators do not update immediately after a status change \\(e.g., from green to red\\).\n 2. Expected Result: Visual indicators should be updated in real-time to reflect current conditions.\n\n_Inconsistent Visual Symbols Across Dashboards:_\n 1. Scenario: The visual indicator for an alert is inconsistent between the main dashboard and the popup view.\n 2. Expected Result: Visual indicators should be consistent across all views\n\n_Heartbeat Received but No Data:_\n 1. Scenario: Heartbeat is being received, but no data is received, and the system does not show grey status.\n 2.",
          "similarity_score": 0.4136825852844418,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 8,
            "chunk_size": 930,
            "content_length": 16031,
            "created_date": "2025-07-25T13:08:52.035Z",
            "document_id": "confluence_3778248705",
            "is_chunk": true,
            "last_modified": "2025-07-25T13:53:04.384Z",
            "page_id": "3778248705",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3778248705",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Detaila about active monitoring",
            "version": "1"
          }
        },
        {
          "content": "/webSocket\\`' path\n 2. Backend will send response as defined in the API specs\n 2. Establish socketio connection\n 1. Frontend will create \u2018socketio\u2019 connection\n 2. Backend will establish connection\n 3. Establish namespace over socketio connection\n 1. Frontend will get namespace socketio connection for '\\`active-monitoring-namespace\\`'\n 4. Initiate data receiving using the namespace socketio conneciton\n 1. Frontend will send \u2018\\`start\\_active\\_monitoring\\`\u2019 event with below payload\n\n\\`\\`\\` \\{ \"siteProgramId\" : \\} \\`\\`\\` \n 5. Disconnect namespace socketio connection\n 1. Frontend will disconnect namespace socketio connection when it no longer needs the data\n\n### Web Socket Data format for Active Monitoring Dashboard\n\\`\\`\\` Method: **W**ebSocket Namespace: active-monitoring-namespace Event Name: rt\\_processed\\_conc\\_data //this should return single data from a monitoring system Response Structure: \\{ \"result\": \\{ \"time\": 19234942324, \"siteProgramId\": \"3212-2313-3112-2332\", \"monitoringSystemI",
          "similarity_score": 0.3970442051369111,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 17,
            "chunk_size": 1000,
            "content_length": 16031,
            "created_date": "2025-07-25T13:08:52.035Z",
            "document_id": "confluence_3778248705",
            "is_chunk": true,
            "last_modified": "2025-07-25T13:53:04.384Z",
            "page_id": "3778248705",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3778248705",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Detaila about active monitoring",
            "version": "1"
          }
        },
        {
          "content": "sLatitude\": 37.7845, \"gpsLongitude\": -122.4036, \"hardwareSerialNumber\": \"LC-SW01-2023-002\", \"group\": \\{ \"id\": \"e1f2a3b4-c5d6-7e8f-9a0b-123456789012\", \"name\": \"Perimeter Monitors\" \\} \\}, \\{ \"monitoringSystemId\": \"8d4f28e1-2f1f-8f6e-3f0f-f6579f257d55\", \"name\": \"Central Process Monitor\", \"siteProgramId\": \"123e4567-e89b-12d3-a456-426614174000\", \"siteId\": \"987e6543-e21b-12d3-b456-426614174001\", \"tenantId\": \"abcd1234-e56f-78g9-h012-426614174002\", \"gpsLatitude\": 37.7850, \"gpsLongitude\": -122.4030, \"hardwareSerialNumber\": \"LC-SW01-2023-002\", \"group\": \\{ \"id\": \"f2g3b4c5-d6e7-8f9a-0b1c-234567890123\", \"name\": \"Process Area Monitors\" \\} \\} \\] \\`\\`\\` **\n## Get Monitoring System Detail by monitoring system ids\nIf monitoring system id does not exist then it will be ignored and no error will be raised for it.\nIf one monitoring system is added to more then one group, only one group detail will be included for that monitoring system.",
          "similarity_score": 0.35668073756955065,
          "metadata": {
            "author": "Praveen kumar",
            "chunk_count": 0,
            "chunk_index": 64,
            "chunk_size": 929,
            "content_length": 53185,
            "created_date": "2025-07-24T17:46:21.134Z",
            "document_id": "confluence_3776741377",
            "is_chunk": true,
            "last_modified": "2025-07-28T14:20:46.086Z",
            "page_id": "3776741377",
            "page_url": "https://picarro.atlassian.net/wiki/pages/viewpage.action?pageId=3776741377",
            "parent_id": "",
            "space_key": "FenceLineD",
            "space_name": "FenceLineDemoSpace",
            "status": "current",
            "tags": "",
            "title": "Duplicate of Tenant Management API contracts",
            "version": "2"
          }
        }
      ],
      "isTyping": false
    }
  ],
  "created_at": "2025-08-01 16:53:33.608244",
  "updated_at": "2025-08-01 16:53:33.608244",
  "user_id": null,
  "metadata": {}
}